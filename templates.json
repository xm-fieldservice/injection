{
  "自然模式": {
    "versions": [
      {
        "name": "默认模板",
        "prefix": "",
        "suffix": ""
      }
    ]
  },
  "生成报告": {
    "versions": [
      {
        "name": "默认模板",
        "prefix": "认真回答问题",
        "suffix": "每次回答或者工作后，生成本次回答或者工作的总结，并自动识别cursor所在的项目，然后将项目名称和总结内容一起，以更新的方式，保存在当前项目的{项目名称}-log.md文档中。\n\n格式要求：\n1. 使用时间戳标题：# 时间戳 (Cursor - 项目：{项目名称})\n2. 必须使用交互块格式：\n   - ## 📥 输入：记录用户的问题或工作请求\n   - ## 📤 输出：记录AI的工作总结和完成情况\n如果用到jsmind的内容，可以到https://deepwiki.com/hizzgdev/jsmind，这是官方的知识库，另外也可以到d:\\ai-projects\\nodemind\\目录内查询nodemind-log.md的开发日志，同一个目录下的代码样例：jsmind-local.html中的各项功能的实现。\n4. 我指令中如果提到“日志”一般是特定指项目目录内的injection-log.md这个文档\n5. 按照既定方针（项目目录内）“injection项目模块化解耦技术方案.md”的约定继续推进整个项目的模块化工作"
      }
    ]
  },
  "代码自查": {
    "versions": [
      {
        "name": "默认模板",
        "prefix": "主要功能点，是否有重复的实现逻辑\n是否有一代码试图引用一个不存在的函数：\n是否路径错误，是否有多个方法实现同一个功能，\n是否没有加载修改的代码\n是否没有启动有修改的代码",
        "suffix": ""
      }
    ]
  },
  "### 修改代码": {
    "versions": [
      {
        "name": "默认模板",
        "prefix": "",
        "suffix": "\n【代码修改外科手术协议】⚡️ 你作为严谨的代码外科医生，必须遵守：\n\n🛑 ​**绝对禁令**  \n1. 禁止创建新函数/类/逻辑块，除非同时满足：\n   - 现有结构无法通过修改实现需求（需证明）\n   - 提供旧代码删除位置列表（文件+行号）\n2. 禁止任何未声明的逻辑增删（含被注释的旧代码）\n\n⚡️ ​**操作规范**  \n1. ​**变更报告模板**​（每次输出前必须包含）：\n   ```diff\n   # 变更报告\n   ## 修改位置：{文件名}.{起始行}-{结束行}\n   - 删除逻辑：[原代码片段] \n   + 新增逻辑：[新代码片段]（<10行）\n   ## 关联影响：{受影响的函数/变量}\n\n【用注释块在代码文档后面记录修改履历，记录的时候采用下面的格式和动词表描述修改动作和内容】\n\n✅ 1. 动作词汇表：【修改】【新增】【删除】...\n\n✅ 2. 极简注释模板：\n# [动作] 日期: 动作描述 (文件:行号范围)\n# [Ref] Commit: 哈希值\n\n\n📝 代码修改动作词汇规范：\n\n🔧 核心动作类：\n- 【修改】：在现有代码基础上改动（推荐优先）\n- 【删除】：移除不需要的代码\n- 【新增】：添加新的代码行（谨慎使用）\n\n⚠️ 重构动作类：\n- 【新生成】：创建新函数/类/模块（需证明必要性）\n- 【重构】：大幅改变代码结构（需用户确认）\n- 【迁移】：移动代码位置（需说明理由）\n\n🧹 清理动作类：\n- 【清理】：删除废弃代码\n- 【合并】：合并重复逻辑\n- 【分离】：拆分过长函数（需确认）\n\n💼 维护动作类：\n- 【格式化】：仅调整代码格式\n- 【注释】：添加或修改注释\n- 【优化】：性能优化（逻辑不变）\n\n生成本次回答或者工作的总结，并自动识别cursor所在的项目，然后将项目名称和总结内容一起，以更新的方式，保存在当前项目的{项目名称}-log.md文档中。\n\n格式要求：\n1. 使用时间戳标题：# 时间戳 (Cursor - 项目：{项目名称})\n2. 必须使用交互块格式：\n   - ## 📥 输入：记录用户的问题或工作请求\n   - ## 📤 输出：记录AI的工作总结和完成情况\n3. 输出部分应包含：工作内容概述、技术要点、解决的问题、完成状态等\n4. 确保格式统一，便于阅读和后续处理\n5. 如果用到jsmind的内容，可以到https://deepwiki.com/hizzgdev/jsmind，这是官方的知识库，另外也可以到d:\\ai-projects\\nodemind\\目录内查询nodemind-log.md的开发日志，同一个目录下的代码样例：jsmind-local.html中的各项功能的实现。\n6. 我指令中如果提到“日志”一般是特定指项目目录内的injection-log.md这个文档\n7. 按照既定方针（项目目录内）“injection项目模块化解耦技术方案.md”的约定继续推进整个项目的模块化工作"
      }
    ]
  },
  "修改不生效": {
    "versions": [
      {
        "name": "默认模板",
        "prefix": "",
        "suffix": "\n修改代码没有生效\n1. 修改的代码没有加载成功\n2. 路径配置错误\n3. 有多个对象，你代码修改的和加载的不是一个。\n4. 没有成功调用修改的新方法。\n5. 代码中有多个实现逻辑，相互影响造成你修改的“一处”代码没有发生作用。\n6. 原来的代码是硬编码，路径等都写死了；新的代码无法替代\n备注：\n7. 如果涉及脑图和详情面板：脑图部分是html结构，详情面板是完全不同的结构，要做特别处理。具体的可以查一下injiection-log.md是否有相关的记载。真正的详情面板是在Python的layout_manager.py中，需要通过WebChannel通信将数据传递过去。\n\n1. 我指令中如果提到“日志”一般是特定指项目目录内的injection-log.md这个文档\n2. 按照既定方针（项目目录内）“injection项目模块化解耦技术方案.md”的约定继续推进整个项目的模块化工作\n\n\n生成本次回答或者工作的总结，并自动识别cursor所在的项目，然后将项目名称和总结内容一起，以更新的方式，保存在当前项目的{项目名称}-log.md文档中。\n\n格式要求：\n1. 使用时间戳标题：# 时间戳 (Cursor - 项目：{项目名称})\n2. 必须使用交互块格式：\n   - ## 📥 输入：记录用户的问题或工作请求\n   - ## 📤 输出：记录AI的工作总结和完成情况\n3. 输出部分应包含：工作内容概述、技术要点、解决的问题、\n4. 确保格式统一，便于阅读和后续处理\n"
      },
      {
        "name": "1",
        "prefix": "1",
        "suffix": ""
      }
    ]
  }
}